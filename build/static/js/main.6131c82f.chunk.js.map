{"version":3,"sources":["components/FileEntry.tsx","screens/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FileEntry","props","FormControlLabel","control","Checkbox","checked","this","value","file","name","onChange","label","index","Component","toast","configure","BootstrapInput","withStyles","theme","createStyles","root","marginTop","spacing","input","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","styles","height","image","backgroundRepeat","backgroundSize","backgroundPosition","avatar","margin","color","form","width","submit","button","textAlign","display","Home","state","user","pass","server","port","tls","subject","fromEmail","fromName","testRecepients","bulkRecepients","body","isHTML","limit","files","selectedFiles","sendAvailable","useSpaceKey","totalSentMails","spaceMode","disableButtons","cronExpression","Promise","resolve","reject","reader","FileReader","onloadend","a","content","result","csv","fromString","array","recepients","item","emailAddress","Object","getOwnPropertyNames","push","readAsBinaryString","err","to","bulk","dismiss","setState","data","host","secure","auth","from","text","undefined","html","url","cron","type","concat","response","axios","post","error","code","autoClose","id","console","log","length","accepted","reduce","x","y","rejected","prevState","sendmail","remainingRecepients","splice","test","Grid","container","component","style","CssBaseline","xs","sm","md","alignItems","flexDirection","Avatar","LockOutlined","Typography","variant","TextField","required","fullWidth","autoFocus","event","target","toString","parseInt","autoComplete","FormLabel","float","FormControl","Select","MenuItem","Paper","tabIndex","onKeyDown","keyCode","MailOutlined","multiline","rows","onKeyPress","key","email_re","filter","match","split","justifyContent","Button","onClick","bind","disabled","ListOutlined","accept","multiple","Array","i","htmlFor","numLoadedFiles","numLoadedEmails","loadEmailsFromFile","recepientsInFile","recepientInFile","re","some","newFiles","newSelectedFiles","map","App","createMuiTheme","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6131c82f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\n\ntype Props = {\n  file: File;\n  checked: boolean;\n  index: number;\n  onChange: React.ChangeEventHandler;\n};\n\nexport default class FileEntry extends Component {\n  props: Props;\n  constructor(props: Props) {\n    super(props);\n\n    this.props = props;\n  }\n\n  render() {\n    return (\n      <FormControlLabel\n        control={\n          <div>\n            <Checkbox\n              checked={this.props.checked}\n              value={this.props.file.name}\n              onChange={this.props.onChange}\n            />\n          </div>\n        }\n        label={`${this.props.index + 1}: ${this.props.file.name}`}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport axios from \"axios\";\nimport csv from \"csvtojson\";\nimport * as cron from \"node-cron\";\nimport { toast } from \"react-toastify\";\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  FormControl,\n  FormLabel,\n  Grid,\n  InputBase,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { createStyles, withStyles, Theme } from \"@material-ui/core/styles\";\nimport { LockOutlined, MailOutlined, ListOutlined } from \"@material-ui/icons\";\n\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport FileEntry from \"../components/FileEntry\";\n\ntoast.configure();\n\nconst BootstrapInput = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"label + &\": {\n        marginTop: theme.spacing(3),\n      },\n    },\n    input: {\n      borderRadius: 4,\n      position: \"relative\",\n      backgroundColor: theme.palette.background.paper,\n      border: \"1px solid #ced4da\",\n      fontSize: 16,\n      padding: \"10px 26px 10px 12px\",\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\n        \"-apple-system\",\n        \"BlinkMacSystemFont\",\n        '\"Segoe UI\"',\n        \"Roboto\",\n        '\"Helvetica Neue\"',\n        \"Arial\",\n        \"sans-serif\",\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(\",\"),\n      \"&:focus\": {\n        borderRadius: 4,\n        borderColor: \"#80bdff\",\n        boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\n      },\n    },\n  })\n)(InputBase);\n\nconst styles = {\n  root: {\n    height: \"100vh\",\n  },\n  image: {\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  avatar: {\n    margin: \"4px\",\n    marginTop: \"1px\",\n    backgroundColor: \"#2980b9\",\n    color: \"#fff\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: \"8px\",\n  },\n  submit: {\n    margin: \"24px 0px 16px\",\n  },\n  button: {\n    margin: \"4px\",\n    width: \"31%\",\n    textAlign: \"center\",\n  } as React.CSSProperties,\n  input: {\n    display: \"none\",\n  },\n};\n\ntype Props = {};\n\ntype State = {\n  user: string;\n  pass: string;\n  server: string;\n  port: number;\n  tls: boolean;\n  subject: string;\n  fromEmail: string;\n  fromName: string;\n  testRecepients: string[];\n  bulkRecepients: string[];\n  body: string;\n  isHTML: boolean;\n  limit: number;\n  files: File[];\n  selectedFiles: boolean[];\n  sendAvailable: boolean;\n  useSpaceKey: boolean;\n  totalSentMails: number;\n  spaceMode: boolean;\n  disableButtons: boolean;\n  cronExpression?: string;\n};\n\nexport default class Home extends Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      user: \"ewssoftwares@gmail.com\",\n      pass: \"password\",\n      server: \"smtp.gmail.com\",\n      port: 587,\n      tls: false,\n      subject: \"EWS Software\",\n      fromEmail: \"ewssoftwares@gmail.com\",\n      fromName: \"EWS Software\",\n      testRecepients: [\"ewssoftwares@gmail.com\"],\n      bulkRecepients: [],\n      body: \"Welcome to EWS Software.\",\n      isHTML: false,\n      limit: 1,\n      files: [],\n      selectedFiles: [],\n      sendAvailable: true,\n      useSpaceKey: false,\n      totalSentMails: 0,\n      spaceMode: false,\n      disableButtons: false,\n      cronExpression: \"\",\n    };\n  }\n\n  loadEmailsFromFile(file: File): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        reader.onloadend = async () => {\n          const content = reader.result;\n          const array = await csv().fromString(content as string);\n          let recepients: string[] = [];\n          for (const item of array) {\n            const emailAddress = item[Object.getOwnPropertyNames(item)[0]];\n            recepients.push(emailAddress);\n          }\n          resolve(recepients);\n        };\n        reader.readAsBinaryString(file);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  async sendmail(to: string[], bulk?: boolean) {\n    toast.dismiss();\n    this.setState({\n      sendAvailable: false,\n    });\n    const data = {\n      host: this.state.server,\n      port: this.state.port,\n      secure: this.state.tls\n        ? this.state.tls\n        : this.state.port === 165\n        ? true\n        : false, // true for 465, false for other ports\n      auth: {\n        user: this.state.user,\n        pass: this.state.pass,\n      },\n      from: `\"${this.state.fromName}\" <${this.state.fromEmail}>`,\n      to,\n      subject: this.state.subject,\n      text: this.state.isHTML ? undefined : this.state.body,\n      html: this.state.isHTML ? this.state.body : undefined,\n      cronExpression: \"\",\n      limit: this.state.limit,\n    };\n    let url = \"\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      url = \"http://localhost:1234/send\";\n    } else {\n      url = \"/send\";\n    }\n    if (bulk && this.state.cronExpression) {\n      if (!cron.validate(this.state.cronExpression)) {\n        toast(\"Invalid cron expression\", { type: \"error\" });\n        return;\n      } else {\n        data.cronExpression = this.state.cronExpression;\n        data.to = to.concat(this.state.bulkRecepients) as any;\n      }\n    }\n    let response: any = null;\n    try {\n      response = await axios.post(url, data);\n    } catch (err) {\n      response = err.response;\n    } finally {\n      const error = response.data.code;\n      if (error) {\n        toast.dismiss();\n        toast(`An error has occured: ${error}`, {\n          type: \"error\",\n          autoClose: false,\n        });\n        this.setState({\n          sendAvailable: true,\n        });\n        return;\n      }\n      if (this.state.cronExpression) {\n        if (!response.data.error && response.data.id)\n          toast(`Scheduled successfully! [${response.data.id}]`, {\n            type: \"info\",\n          });\n        else {\n          toast(\"Failed to schedule\", { type: \"error\" });\n          console.log(response.data);\n        }\n\n        this.setState({\n          bulkRecepients: [],\n        });\n        return;\n      }\n      if (response.data!.length) {\n        const accepted = response.data.reduce(\n          (x: number, y: any) => x + y.accepted!.length,\n          0\n        );\n        const rejected = response.data.reduce(\n          (x: number, y: any) => x + y.rejected!.length,\n          0\n        );\n        this.setState(\n          (prevState) => {\n            return {\n              totalSentMails: prevState.totalSentMails + accepted,\n            };\n          },\n          () => {\n            toast.dismiss();\n            toast(`${this.state.totalSentMails} emails were sent!`, {\n              type: \"info\",\n              autoClose: false,\n            });\n          }\n        );\n        if (rejected) {\n          toast.dismiss();\n          toast(`${rejected} emails were not sent!`, {\n            type: \"warning\",\n            autoClose: false,\n          });\n        }\n      } else {\n        toast.dismiss();\n        toast(\"No emails were sent!\", {\n          type: \"warning\",\n          autoClose: false,\n        });\n      }\n      this.setState({\n        sendAvailable: true,\n      });\n    }\n  }\n\n  test() {\n    let { testRecepients } = this.state;\n    if (!testRecepients.length) {\n      toast(`No recipients defined`, { type: \"error\" });\n      return;\n    }\n    this.sendmail([testRecepients[0]]);\n  }\n\n  bulk() {\n    let { bulkRecepients, limit } = this.state;\n    let remainingRecepients = bulkRecepients.splice(limit);\n    this.setState(\n      {\n        bulkRecepients: remainingRecepients,\n        useSpaceKey: this.state.spaceMode ? true : this.state.useSpaceKey,\n      },\n      () => {\n        if (!bulkRecepients.length) {\n          toast(`No recipients defined`, { type: \"error\" });\n          return;\n        }\n\n        this.sendmail(bulkRecepients, true);\n      }\n    );\n    this.test();\n  }\n\n  render() {\n    return (\n      <div>\n        <Grid container component=\"main\" style={styles.root}>\n          <CssBaseline />\n          <Grid item xs={12} sm={8} md={3} style={styles.image}>\n            <div\n              style={{\n                margin: \"64px 32px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <Avatar style={styles.avatar}>\n                <LockOutlined />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                SMTP Credentials\n              </Typography>\n              <div style={styles.form}>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.server}\n                  id=\"server\"\n                  label=\"Server\"\n                  name=\"server\"\n                  autoFocus\n                  onChange={(event) => {\n                    this.setState({\n                      server: event.target.value,\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.port.toString()}\n                  name=\"port\"\n                  label=\"Port\"\n                  type=\"number\"\n                  id=\"port\"\n                  onChange={(event) => {\n                    this.setState({\n                      port: parseInt(event.target.value),\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.user}\n                  id=\"email\"\n                  label=\"User\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  onChange={(event) => {\n                    this.setState({\n                      user: event.target.value,\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.pass}\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"current-password\"\n                  onChange={(event) => {\n                    this.setState({\n                      pass: event.target.value,\n                    });\n                  }}\n                />\n                <FormLabel\n                  style={{ float: \"left\", marginTop: \"3%\" }}\n                  component=\"legend\"\n                >\n                  TLS\n                </FormLabel>\n                <FormControl style={{ float: \"right\", width: \"100%\" }}>\n                  <Select\n                    value={this.state.tls ? 1 : 0}\n                    onChange={(event) => {\n                      this.setState({\n                        tls:\n                          parseInt(event.target.value as string) === 1\n                            ? true\n                            : false,\n                      });\n                    }}\n                    input={<BootstrapInput name=\"tls\" id=\"tls\" />}\n                  >\n                    <MenuItem value={0}>No</MenuItem>\n                    <MenuItem value={1}>Yes</MenuItem>\n                  </Select>\n                </FormControl>\n              </div>\n            </div>\n          </Grid>\n          <Grid item xs={false} sm={4} md={5} component={Paper}>\n            <div\n              style={{\n                margin: \"64px 32px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n              tabIndex={this.state.useSpaceKey ? 0 : undefined}\n              onKeyDown={(event) => {\n                if (event.keyCode === 32 && this.state.useSpaceKey) {\n                  this.bulk();\n                }\n              }}\n            >\n              <Avatar style={styles.avatar}>\n                <MailOutlined />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Mail Details\n              </Typography>\n              <div style={styles.form}>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.subject}\n                  id=\"subject\"\n                  label=\"Subject\"\n                  name=\"subject\"\n                  onChange={(event) => {\n                    this.setState({\n                      subject: event.target.value,\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.fromEmail}\n                  name=\"from_email\"\n                  label=\"From (Email)\"\n                  id=\"from_email\"\n                  onChange={(event) => {\n                    this.setState({\n                      fromEmail: event.target.value,\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.fromName}\n                  name=\"from_name\"\n                  label=\"From (Name)\"\n                  id=\"from_name\"\n                  onChange={(event) => {\n                    this.setState({\n                      fromName: event.target.value,\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  value={this.state.testRecepients.join(\"\\n\")}\n                  name=\"recepients\"\n                  label=\"Recepients\"\n                  id=\"recepients\"\n                  multiline\n                  rows={6}\n                  onKeyPress={(event) => {\n                    if (event.key === \"Enter\") {\n                      // eslint-disable-next-line\n                      const email_re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                      let testRecepients = this.state.testRecepients;\n                      testRecepients = testRecepients.filter((x) =>\n                        x.match(email_re)\n                      );\n                      this.setState({\n                        testRecepients,\n                      });\n                    }\n                  }}\n                  onChange={(event) => {\n                    let recepients = event.target.value.split(\"\\n\");\n                    this.setState({\n                      testRecepients: recepients,\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.body}\n                  name=\"body\"\n                  label=\"Body\"\n                  id=\"body\"\n                  multiline\n                  rows={8}\n                  onChange={(event) => {\n                    this.setState({\n                      body: event.target.value,\n                    });\n                  }}\n                />\n                <FormLabel\n                  style={{ float: \"left\", marginTop: \"3%\" }}\n                  component=\"legend\"\n                >\n                  HTML\n                </FormLabel>\n                <FormControl style={{ float: \"right\", width: \"100%\" }}>\n                  <Select\n                    value={this.state.isHTML ? 1 : 0}\n                    onChange={(event) => {\n                      this.setState({\n                        isHTML:\n                          parseInt(event.target.value as string) === 1\n                            ? true\n                            : false,\n                      });\n                    }}\n                    input={<BootstrapInput name=\"isHTML\" id=\"isHTML\" />}\n                  >\n                    <MenuItem value={0}>No</MenuItem>\n                    <MenuItem value={1}>Yes</MenuItem>\n                  </Select>\n                </FormControl>\n                <FormLabel\n                  style={{ float: \"left\", marginTop: \"3%\" }}\n                  component=\"legend\"\n                >\n                  Space Mode\n                </FormLabel>\n                <FormControl style={{ float: \"right\", width: \"100%\" }}>\n                  <Select\n                    value={this.state.spaceMode ? 1 : 0}\n                    onChange={(event) => {\n                      this.setState({\n                        spaceMode:\n                          parseInt(event.target.value as string) === 1\n                            ? true\n                            : false,\n                      });\n                    }}\n                    input={<BootstrapInput name=\"spaceMode\" id=\"spaceMode\" />}\n                  >\n                    <MenuItem value={0}>No</MenuItem>\n                    <MenuItem value={1}>Yes</MenuItem>\n                  </Select>\n                </FormControl>\n                <FormLabel\n                  style={{ float: \"left\", marginTop: \"3%\" }}\n                  component=\"legend\"\n                >\n                  Disable Buttons\n                </FormLabel>\n                <FormControl style={{ float: \"right\", width: \"100%\" }}>\n                  <Select\n                    value={this.state.disableButtons ? 1 : 0}\n                    onChange={(event) => {\n                      this.setState({\n                        disableButtons:\n                          parseInt(event.target.value as string) === 1\n                            ? true\n                            : false,\n                      });\n                    }}\n                    input={\n                      <BootstrapInput\n                        name=\"disableButtons\"\n                        id=\"disableButtons\"\n                      />\n                    }\n                  >\n                    <MenuItem value={0}>No</MenuItem>\n                    <MenuItem value={1}>Yes</MenuItem>\n                  </Select>\n                </FormControl>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.limit.toString()}\n                  name=\"limit\"\n                  label=\"Limit (max 25000)\"\n                  type=\"number\"\n                  id=\"limit\"\n                  onChange={(event) => {\n                    this.setState({\n                      limit: parseInt(event.target.value),\n                    });\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  value={this.state.cronExpression}\n                  name=\"cron-expression\"\n                  label=\"Cron Expression\"\n                  type=\"text\"\n                  id=\"limit\"\n                  onChange={(event) => {\n                    this.setState({\n                      cronExpression: event.target.value,\n                    });\n                  }}\n                />\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-evenly\",\n                  }}\n                >\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    style={{\n                      margin: \"24px 0px 16px\",\n                      width: \"30%\",\n                    }}\n                    onClick={this.test.bind(this)}\n                    disabled={\n                      this.state.disableButtons && !this.state.sendAvailable\n                    }\n                  >\n                    Test\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    style={{\n                      margin: \"24px 0px 16px\",\n                      width: \"30%\",\n                    }}\n                    onClick={() => {\n                      this.bulk();\n                    }}\n                    disabled={\n                      this.state.disableButtons && !this.state.sendAvailable\n                    }\n                  >\n                    {this.state.cronExpression ? \"Schedule\" : \"Bulk\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Grid>\n          <Grid item xs={12} sm={8} md={4} style={styles.image}>\n            <div\n              style={{\n                margin: \"64px 32px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <Avatar style={styles.avatar}>\n                <ListOutlined />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Address List\n              </Typography>\n              <div style={styles.form}>\n                <input\n                  accept=\"text/csv\"\n                  style={{ display: \"none\" }}\n                  id=\"file-chooser\"\n                  type=\"file\"\n                  multiple\n                  onChange={(event) => {\n                    let { files, selectedFiles } = this.state;\n                    files = files.concat(Array.from(event.target.files!));\n                    for (let i = 0; i < files.length; i++) {\n                      selectedFiles.push(true);\n                    }\n                    this.setState({\n                      files,\n                      selectedFiles,\n                    });\n                  }}\n                />\n                <label htmlFor=\"file-chooser\">\n                  <Button\n                    variant=\"contained\"\n                    component=\"span\"\n                    style={styles.button}\n                  >\n                    Choose\n                  </Button>\n                </label>\n                <label>\n                  <Button\n                    variant=\"contained\"\n                    component=\"span\"\n                    style={styles.button}\n                    onClick={async () => {\n                      let bulkRecepients = [];\n                      let numLoadedFiles = 0,\n                        numLoadedEmails = 0;\n                      for (let i = 0; i < this.state.files.length; i++) {\n                        const file = this.state.files[i];\n                        if (this.state.selectedFiles[i]) {\n                          const recepientsInFile = await this.loadEmailsFromFile(\n                            file\n                          );\n                          for (const recepientInFile of recepientsInFile) {\n                            bulkRecepients.push(recepientInFile);\n                            numLoadedEmails++;\n                          }\n                          numLoadedFiles++;\n                        }\n                      }\n                      // eslint-disable-next-line\n                      const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                      bulkRecepients = bulkRecepients.filter(\n                        (x) => x && x.match(re)\n                      );\n                      toast.dismiss();\n                      toast(\n                        `Loaded ${numLoadedEmails} email addresses from ${numLoadedFiles} ${\n                          numLoadedFiles === 1 ? \"file\" : \"files\"\n                        }`,\n                        { type: \"success\" }\n                      );\n                      this.setState({\n                        bulkRecepients,\n                      });\n                    }}\n                  >\n                    Load\n                  </Button>\n                </label>\n                <label>\n                  <Button\n                    variant=\"contained\"\n                    component=\"span\"\n                    style={styles.button}\n                    onClick={() => {\n                      const hasSelectedSomething = this.state.selectedFiles.some(\n                        (x) => !!x\n                      );\n                      if (!hasSelectedSomething) {\n                        toast.dismiss();\n                        toast(\"You must select at least one file to delete!\", {\n                          type: \"error\",\n                        });\n                      } else {\n                        let { files, selectedFiles } = this.state,\n                          newFiles = [],\n                          newSelectedFiles = [];\n                        for (let i = 0; i < selectedFiles.length; i++) {\n                          const selectedFile = selectedFiles[i];\n                          if (!selectedFile) {\n                            newFiles.push(files[i]);\n                            newSelectedFiles.push(selectedFiles[i]);\n                          }\n                        }\n                        this.setState({\n                          files: newFiles,\n                          selectedFiles: newSelectedFiles,\n                        });\n                      }\n                    }}\n                  >\n                    Delete\n                  </Button>\n                </label>\n                {this.state.files.map((file, index) => (\n                  <FileEntry\n                    file={file}\n                    key={index}\n                    index={index}\n                    checked={this.state.selectedFiles[index]}\n                    onChange={() => {\n                      let { selectedFiles } = this.state;\n                      selectedFiles[index] = !selectedFiles[index];\n                      this.setState({\n                        selectedFiles,\n                      });\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n","import { createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport Home from \"./screens/Home\";\n\nconst App: React.FC = () => {\n  return (\n    <MuiThemeProvider theme={createMuiTheme({ palette: { type: \"dark\" } })}>\n      <Home />\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}